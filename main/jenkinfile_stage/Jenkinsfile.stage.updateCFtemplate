#!/usr/bin/env groovy
@Library('pipeline-library') _
TimeZone.setDefault(TimeZone.getTimeZone('UTC'))

def call(region, stack, params){
    println (awsUpdateCloudformationStack(region, stack, params))
    i = 1
    while(awsDescribeStackEvents(region, stack)[0]["ResourceStatus"] != "UPDATE_COMPLETE"){
        // res = awsDescribeStackEvents(region, stack)
        // println ("attempt: " + i + ", timestamp: "+res["Timestamp"][0]+", ResourceStatus: "+res["ResourceStatus"][0]+", ResourceStatusReason: "+res["ResourceStatusReason"][0]+".\n")
        println ("attemp: ${i} -> CloudFormation Update is in progress.")
        i++
        sleep(10)
        if (i == 5) {
            println("## Failed to update ClouFormation.\n")
            stack_events = awsDescribeStackEvents(region, stack)
            for (object in stack_events){
                if (object["Timestamp"] =~ String.format('%tF', java.time.LocalDateTime.now())){
                    println ("timestamp: "+object["Timestamp"]+", ResourceStatus: "+object["ResourceStatus"]+", ResourceStatusReason: "+object["ResourceStatusReason"]+".\n")
                }
            }
            throw new Exception("## Failed to update ClouFormation. Please check the ResourceStatusReason.")
        }
    }

    if (awsDescribeStackEvents(region, stack)[0]["ResourceStatus"] == "UPDATE_COMPLETE"){
        // get_first_event = awsDescribeStackEvents(region, stack)
        println("CF is updated successfully.")
        // println ("timestamp: "+get_first_event["Timestamp"][0]+", ResourceStatus: "+get_first_event["ResourceStatus"][0]+", ResourceStatusReason: "+get_first_event["ResourceStatusReason"][0]+".\n")
    }
}
return this