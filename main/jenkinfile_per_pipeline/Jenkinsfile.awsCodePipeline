@Library('pipeline-library') _
import groovy.json.JsonSlurperClassic
import groovy.json.JsonBuilder

def param = new JsonSlurperClassic().parseText(env.PARAMS_STR)
version = params.releaseVersion
awsCodePipeline = param.awsCodePipeline

region = awsCodePipeline.region
repo = awsCodePipeline.codeCommitRepo
cfStack = awsCodePipeline.cfStack
pipeline = awsCodePipeline.codePipeline
rule = awsCodePipeline.eventRule

node('master'){
    cfStackParams = awsDescribeStack(region, cfStack)["Stacks"]["Parameters"][0]
    branchName = cfStackParams.find {it.'ParameterKey' == "BucketPrefix"}
    branchValue = "${branchName.'ParameterValue'}"

    stage('prepraration'){
        println "--> prepraration stage"
        def common = param.common
        checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: common.gitUrl, credentialsId: common.cred]], branches: [[name: "refs/heads/${common.branch}"]]], poll: false
    }

    stage('check release branch on codeCommit'){
        println "--> check release branch on codeCommit stage"
        awsCodeCommitBranchCheck(region, repo, version)
    }

    if(rule && env.event_rule_status == 'disable'){
        stage('disable event rule status'){
            println("--> disable event rule")
            awsEventsDisableRule(params)
            sleep(5)
            awsEventsDescribeRule(params)
        }
        stage('Waiting for Jira tickets to complete'){
            timeout(time: 2, unit: 'HOURS') {
                input message: "DO NOT PROCEED UNTIL YOU GET CONFIRMATION."
            }
        }
        stage('enable back event rule status'){
            println("--> enable event rule")
            awsEventsEnableRule(params)
            sleep(5)
            awsEventsDescribeRule(params)
        }
    }

    stage('Update CF template and get stack events'){
        println "--> Update CF template and get stack events stage"
        def updateCFtemplate = load ("${WORKSPACE}/main/jenkinfile_stage/Jenkinsfile.stage.updateCFtemplate")
        updateCFtemplate(region, cfStack, branchValue)
    }

    stage('execute code pipeline & get pipeline status'){
        println "--> execute code pipeline & get pipeline status stage"
        def execCodePipeline = load("${WORKSPACE}/main/jenkinfile_stage/Jenkinsfile.stage.execCodePipeline")
        execCodePipeline(region, pipeline)
    }    

    stage('workspace cleanup'){
        cleanWs()
    }
}