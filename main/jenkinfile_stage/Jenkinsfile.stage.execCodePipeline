#!/usr/bin/env groovy
@Library('pipeline-library') _
import groovy.json.JsonSlurperClassic
import static groovy.json.JsonOutput.*

def pipeline_state(region, pipeline){
    get_pipeline_state = awsPipelineStates(region, pipeline)
    for (stage in get_pipeline_state["stageStates"]){
        for (action in stage["actionStates"]){
            if (action.containsKey('latestExecution')){
            println("stageName: "+stage["stageName"]+ ", status: "+action['latestExecution']["status"])
            }
            else{
                println("stageName: "+stage["stageName"]+ ", status: null")
            }
        }
    }
}

def call(reg, pipeline_name){
    println (awsExecuteCodePipeline(reg, pipeline_name))
    // i=1
    // while(awsPipelineStatus(reg, pipeline_name) == "InProgress"){
    //     println ("attemp: ${i} --> Deployment is on progress.")
    //     pipeline_state(reg, pipeline_name)
    //     i++
    //     sleep (15)
    // }

    watch(awsPipelineStatus(reg, pipeline_name)){
        if (awsPipelineStatus(reg, pipeline_name) == "InProgress"){
            println ("--> Deployment is on progress.")
            pipeline_state(reg, pipeline_name)
        }
    }

    if (awsPipelineStatus(reg, pipeline_name) == "Succeeded"){
        println("--> Deployment is completed successfully.")
        pipeline_state(reg, pipeline_name)
    }
    else {
        pipeline_state(reg, pipeline_name)
        throw new Exception ("## Code Pipeline has been Failed or Stopped or Aborted, Status: ${awsPipelineStatus(reg, pipeline_name)}\n")
    }
}
return this