@Library('pipeline-library') _
import groovy.json.JsonSlurperClassic

def param = new JsonSlurperClassic().parseText(env.PARAMS_STR)
awsEventRule = param.awsEventRule

node('master'){
    stage('prepraration'){
        println "--> prepraration stage"
        def common = param.common
        checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: common.gitUrl, credentialsId: common.cred]], branches: [[name: "refs/heads/${common.branch}"]]], poll: false
    }

    stage('Changing event rule status'){
        println "--> Changing event rule status stage"
        if (params.event_rule_status == "enable"){
            awsEnableEventRule = awsEnableEventRule(awsEventRule.region, awsEventRule.eventRule)
            sleep(7)
            awsDescribeEventRule = awsDescribeEventRule(awsEventRule.region, awsEventRule.eventRule)
            println ("Rule_name: "+awsDescribeEventRule["Name"]+ ", Status: "+awsDescribeEventRule["State"])
        }
        if (params.event_rule_status == "disable"){
            awsDisableEventRule = awsDisableEventRule(awsEventRule.region, awsEventRule.eventRule)
            sleep(7)
            awsDescribeEventRule = awsDescribeEventRule(awsEventRule.region, awsEventRule.eventRule)
            println ("Rule_name: "+awsDescribeEventRule["Name"]+ ", Status: "+awsDescribeEventRule["State"])
        }

    }   

    stage('workspace cleanup'){
        cleanWs()
    }
}